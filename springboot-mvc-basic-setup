
* Standalone and WAR deployment modes
* Purpose of `ServletInitializer` and main class
* Required dependencies
* When and why `tomcat-embed-jasper` is used
* Notes on `server.port`, JSP rendering, and container behavior

--
```markdown
# 🌐 Spring Boot MVC Project - Display Home Page (WAR & Standalone)

A simple **Spring Boot MVC** application to display a home page using JSP technology. This project demonstrates how to run Spring Boot applications both as:

- ✅ A **standalone JAR** application using **embedded Tomcat**
- 🛠️ A **deployable WAR** application for **external servlet containers** like Apache Tomcat

---

## 📁 Project Overview

- **Framework**: Spring Boot
- **View Technology**: JSP
- **Controller**: Spring MVC
- **Packaging**: WAR (supports both standalone and external deployment)
- **Build Tool**: Maven

---

## 🔧 Project Structure

```

BootMvcProj1DisplayHomePage/
│
├── src/main/java/
│   └── com/web/
│       ├── BootMvcProj1DisplayHomePageApplication.java   <-- Main class
│       ├── ServletInitializer.java                       <-- Required for WAR deployment
│       └── controller/
│           └── ShowHomePage.java                         <-- Controller class
│
├── src/main/webapp/
│   └── WEB-INF/pages/
│       └── home.jsp                                      <-- JSP view
│
├── pom.xml
└── README.md

````

---

## 🚀 Running Modes

### ✅ 1. Standalone Application (Embedded Tomcat)

Spring Boot provides **embedded Tomcat** by default, so you can run this project as a **standalone executable JAR**.

#### 🔹 How to Run

```bash
mvn clean package
java -jar target/BootMvcProj1DisplayHomePage-0.0.1-SNAPSHOT.war
````

> Even though it's packaged as `.war`, Spring Boot allows `.war` files to be executable JARs too (if main class is present).

#### 🔹 Required Spring Boot Starters

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<dependency>
    <groupId>org.apache.tomcat.embed</groupId>
    <artifactId>tomcat-embed-jasper</artifactId>
</dependency>

<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
</dependency>
```

> ✅ `tomcat-embed-jasper` is essential for **JSP rendering in embedded Tomcat** (JAR mode).
>
> ❗ In **WAR deployment**, external servers (like Apache Tomcat) already support JSP natively — no need to include `tomcat-embed-jasper`.

---

### 🛠️ 2. Deployable WAR (External Server)

To run this app on an **external servlet container**, such as **Apache Tomcat**, deploy the WAR file.

#### 🔹 How to Deploy

```bash
mvn clean package
```

Copy the generated file:

```
target/BootMvcProj1DisplayHomePage.war
```

Into your external Tomcat's `webapps/` directory.

---

### 🔍 Required Components for WAR Deployment

#### ✅ 1. `BootMvcProj1DisplayHomePageApplication.java`

```java
@SpringBootApplication
public class BootMvcProj1DisplayHomePageApplication {
    public static void main(String[] args) {
        SpringApplication.run(BootMvcProj1DisplayHomePageApplication.class, args);
    }
}
```

* Acts as the **main entry point** when running in standalone mode.
* Not used by servlet containers during WAR deployment, but needed for Spring Boot configuration context.

#### ✅ 2. `ServletInitializer.java`

```java
public class ServletInitializer extends SpringBootServletInitializer {
    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(BootMvcProj1DisplayHomePageApplication.class);
    }
}
```

* **Why it's required?**

  * This class allows Spring Boot to **bootstrap your app within an external servlet container**.
  * It replaces the need for `web.xml` in traditional Java EE WARs.

* **What it does?**

  * It hooks into the servlet container’s lifecycle to load the Spring application context.

---

## 🌐 Access URL

After starting the application (standalone or deployed):

Visit:

```
http://localhost:8080/welcome
```

You should see:

```
Welcome to Springboot MVC
```

---

## ⚙️ JSP & Embedded Tomcat Notes

* Spring Boot does not support JSPs directly in JAR mode **without extra configuration**.

* So, for JSP support:

  * Package the app as a `.war`
  * Use `tomcat-embed-jasper` when using embedded Tomcat
  * Place JSP files in:

    ```
    src/main/webapp/WEB-INF/views/
    ```

* **No need to define view resolvers manually**. Spring Boot uses `InternalResourceViewResolver` with default settings.

---

## 🧱 Application Properties (Optional)

If you want to configure things like port, use `application.properties`:

```properties
server.port=4041
spring.mvc.view.prefix=/WEB-INF/pages/
spring.mvc.view.suffix=.jsp
```

This is helpful when:

* Running on custom ports
* Overriding view prefixes/suffixes

---

## 🗃️ Build and Deployment Summary

| Mode           | Packaging        | ServletInitializer Required | tomcat-embed-jasper       | Application Port                 |
| -------------- | ---------------- | --------------------------- | ------------------------- | -------------------------------- |
| Standalone     | `.jar` or `.war` | ✅ Yes                       | ✅ Yes                     | Set via `application.properties` |
| Deployable WAR | `.war`           | ✅ Yes                       | ❌ No (provided by server) | Managed by external Tomcat       |

---

## 📩 Contact

**Author**: Pradip Ghadge
📧 Email: [pradipghadge17@gmail.com](mailto:pradipghadge17@gmail.com)
💼 Java Developer | Spring Boot | Spring MVC | Oracle | JSP | JDBC

---

> ✅ This project is a perfect base for learning or building more advanced Spring MVC + JSP applications.


